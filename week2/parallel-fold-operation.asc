= Parallel Fold Operation

=== Functional programming and collections

fold : combine elements with a given operation

[source,scala]
----
List(1, 3, 8).fold(100)((s,x) => s + x) == 112
----

== Fold: meaning and properties

Fold takes among others a binary operation, but variants differ:

- whether they take an initial element or assume non-empty list
- in which order they combine operations of collection

[source,scala]
----
List(1, 3, 8).foldLeft(100)((s,x) => s - x) == ((100 - 1) - 3) = 8 == 88
List(1, 3, 8).foldRight(100)((s,x) => s - x) == 1 - (3 - (8 - 100)) == -94
List(1, 3, 8).reduceLeft((s,x) => s - x) == (1 - 3) - 8 == - 10
List(1, 3, 8).reduceRight((s,x) => s - x) == 1 - (3 - 8) == 6
----

To enable parallel operations, we look at associative operations(결합법칙)

=== Associative operation

Operation f: (A, A) => A is associative iff for every x, y, z: 필요충분조건

[source,scala]
----
f(x, f(y, z)) = f(f(x, y), z)
----

If we write f(a, b) in infix form as a ⊗ b, assoviativity becomes

[source,scala]
----
x ⊗ (y ⊗ z) = (x ⊗ y) ⊗ z
----

=== Folding (reducing) trees

How do we compute the value of such an expression tree?

[source,scala]
----
sealed abstract class Tree[A]
case class Leaf[A](value: A) extends Tree[A]
case class Node[A](left: Tree[A], right: Tree[A]) extends Tree[A]
----

Result of evaluating the expression is given by a reduce of this tree.

What is its (sequential) definition?

[source,scala]
----
def reduce[A](t: Tree[A], f: (A, A) => A): A = t match {
  case Leaf(v) => v
  case Node(l, r) => f(reduce[A](l, f), reduce[A](r, f))
}
----

=== Running reduce

For non-associative operation, the result depends on structure of the tree

[source,scala]
----
def tree = Node(Leaf(1), Node(Leaf(3), Leaf(8)))
def fMinus = (x:Int, y:Int) => x - y
def res = reduce[Int](tree, fMinus)
----

=== Parallel reduce of a tree

[source,scala]
----
def reduce[A](t: Tree[A], f: (A, A) => A): A = t match {
  case Leaf(v) => v
  case Node(l, r) => {
    val (lV, rV) = parallel(reduce[A](l, f), reduce[A](r, f))
    f(lV, rV)
  }
}
----

What is the depth complexity of such reduce?
Answer: height of the tree

=== Order of elements in a tree

Observe: can use a list to describe the ordering of elements of a tree

[source,scala]
----
def toList[A](t: Tree[A]): List[A] = t match {
  case Leaf(v) => List(v)
  case Node(l, r) => toList[A](l) ++ toList[A](r)
}
----

Suppose we also have tree map:

[source,scala]
----
def map[A, B](t: Tree[A], f: A => B): Tree[B] = t match {
  case Leaf(v) => Leaf(f(v))
  case Node(l, r) => Node(map[A,B](l, f), map[A,B](r, f))
}
----

Can you express toList using map and reduce?

toList(t) == reduce(map(t, List(_)), _ ++ _)

=== Consequence stated as tree reduction

Consequence of associativity: consider two expressions with same list of operands connected with ⊗, but different parentheses. Then these expressions evaluate to the same result.

Express this consequence in Scala using functions we have defined so far.

Consequence(Scala): if f: (A, A) => A is associative, t1: Tree[A] and t2: Tree[A] and if toList(t1) == toList(t2), then:

reduce(t1, f) == reduce(t2, f)
