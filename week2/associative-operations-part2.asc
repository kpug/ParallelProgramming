= Associative Operations Part 2

=== Associative operations on tuples

Suppose f1: (A1, A1) => A1 and f2: (A2, A2) => A2 are associative

Then f : ((A1, A2), (A1, A2)) => (A1, A2) defined by

f((x1, x2), (y1, y2)) = (f1(x1, y1), f1(x2, y2))

is also associative:

=== Example: rational multiplication

Suppose We use 32-bit number to represent numerator and denominator of a rational number.

We can define multiplication working on pairs of numerator and denominator

times((x1, y1), (x2, y2)) = (x1 * x2, y1 * y2)

Because multiplication modulo 2^32 is associative, so is times

=== Example: average

Give a collection of integers, compute the average

[source, scala]
----
val sum = reduce(collection, _ + _)
val length = reduce(map(collection, (x: Int) => 1), _ + _)
sum / length
----

This include two reductions. Is there a solution using a single reduce?

Using pairs that compute sum and length at once.

f((sum1, len1), (sum2, len2)) = (sum1 + sum1, len1 + len2)

Function is associative becuase addition is associative.

Solution then :

val (sum, length) = reduce(map(collection, (x: Int) => (x,1)), f)
sum / length

=== Associativity through symmetry and commutativity

Although commutativity of f alone does not imply associativity, it implies it if we have an additional property. Define:

E(x, y, z) = f(f(x, y), z)

We say arguments of E can rotate if E(x, y, z) = E(y, z, x), that is:

f(f(x, y), z) = f(f(y, z), x)

Claim: if f is commutative and arguments of E can rotate then f is also associative.

Proof:

f(f(x, y), z) = f(f(y, z), x) = f(x, f(y, z))

=== Example: addition of modular fractions

Define

plus((x1, y1), (x2, y2)) = (x1 * y2 + x2 * y1, y1 * y2)

where * and + are modulo some base(e.g. 2^32).

We can have overflows in both numerator and denominator

Is such plus associative?

=== Example: addition of modular fractions

plus((x1, y1), (x2, y2)) = (x1 * y2 + x2 * y1, y1 * y2)

Obseve: plus is commutative. Moreover:

[source,scala]
----
E((x1, y1), (x2, y2), (x3, y3)) ==
plus(plus(x1, y1), (x2, y2), (x3, y3)) ==
plus((x1 * y2 + x2* y1, y1* y2), (x3, y3)) ==
((x1 * y2 + x2 * y1) * y3 + x3 * y1 * y2, y1 * y2 * y3) ==
(x1 * y2 * y3 + x2 * y1 * y3 + x3 * y1 * y2, y1 * y2 * y3)
----

Therefore

[source,scala]
----
E((x2, y2), (x3, y3), (x1, y1)) ==
(x2 * y3 * y1 + x3 * y2 * y1 + x1 * y2 * y3, y2 * y3 * y1)
---

which is same. By previous claim, plus is associative.
