= Assoviative Operations Part 1

=== Associative operation

Operation f:(A, A) => A is associative iff for every x, y, z:

[source,scala]
----
f(x, f(y, z)) == f(f(x, y), z)
----

Consequence:

- two expressions with same list of operands connected with ⊗, but different parentheses evaluate to the same result
- reduce on any tree with this list of operands gives the same result

=== A different property: commutativity(교환법칙)

Operation f: (A, A) => A is commutative iff for every x, y:

f(x, y) == f(y, x)

There are operations that are associative but not commutative

There are operations that are commutative but not associative

For correctness of reduce, we need (just) associativity

=== Example of operations that are both associative and commutative

Many operations from math

- addition and multiplication of mathematical integers(BigInt) and of exact rational numbers(given as, e.g. pairs of BigInts)
- addition and multiplication modulo a positive integer(e.g. 2^32), including the usual arithmetic on 32-bit Int or 64-bit Long values
- union, intersection, and symmetric difference of sets
- union of bags (multisets) that preserves duplicate elements
- boolean operations &&, ||, exclusive or
- addition and multiplication of polynomials
- addition of vectors
- addition of metrices of fixed dimension

=== Using sum: array norm

our array norm example computes first:

image::../static/img/week2/associativity1.png

Which combination of operations does sum of powers correspond to?

[source,scala]
----
reduce(map(a, power(abs(_), p)), _ + _)
----

Here + is the associative operation of reduce

map can be combined with reduce to avoid intermediate collections

=== Examples of operations that are associative but not commutative

These examples illustrate that associativity does not imply commutativity:

- concatenation(append) of lists: (x ++ y) ++ z == x ++ (y ++ z)
- concatnation of Strings (which can be viewd as lists of Char)
- matrix multiplication AB for matrices A and B of compatible dimensions
- composition of relations
- composition of function

Because they are associative, reduce stil gives the same result

=== Many operations are commutative but not assoviative
