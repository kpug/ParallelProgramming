= Merge sort

병렬 merge sort 알고리즘을 구현할 것이다.

1. recursively sort the two halves of the array in parallel
2. sequentially merge the two array halves by copying into a temporary array
3. copy the temporary array back into the original array

[source,scala]
----
def parMergeSort(xs: Array[Int], maxDepth: Int): Unit = {
  val ys = new Array[Int](xs.length)
}
----

=== Sorting the Array

[source,scala]
----
def sort(from: Int, until: Int, depth: Int): Unit = {
  if (depth == maxDepth) {
    quickSort(xs, from, until - from)
  } else {
    val mid = (from + until) / 2
    parallel(sort(mid, until, depth + 1), sort(from, mid, depth + 1))

    val flip = (maxDepth - depth) % 2 == 0
    val src = if (flip) ys else xs
    val dst = if (flip) xs esle ys
    merge(src, dst, from, mid, until)
  }
}

sort(0, xs.length, 0)
----

=== Merging the Array

Given an array src consisting of two sorted intervals, merge those interval into the dst array

[source,scala]
----
def merge(src: Array[Int], dst: Array[Int], from: Int, mid: Int, until: Int): Unit
----

The merge implementation is sequential, so we will not go throught it.



=== Copying the Array

[source,scala]
----
def copy(src: Array[Int], target: Array[Int], from: Int, until: Int, depth: Int): Unit = {
  if (depth == maxDepth) {
    Array.copy(src, from, target, from, until - from)
  } else {
    val mid = (from + until) / 2
    val right = parallel(
                        copy(src, target, mid, until, depth + 1),
                        copy(src, target, from, mid, depth + 1)
    )
  }
}
if ( maxDepth % 2 == 0 ) copy(ys, xs, 0, xs.length, 0)
----
