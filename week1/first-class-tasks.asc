= First-Class Tasks

=== More flexible construct for parallel computation

[source,scala]
----
val (v1, v2) = parallel(e1, e2) // <1>

val t1 = task(e1) // <2>
val t2 = task(e2)
val v1 = t1.join
val v2 = t2.join
----
<1> : 병렬 수행 코드
<2> : 동일 코드

image::../static/img/week1/first-1.png[]

t = task(e)는 백그라운드에서 연산을 시작한다.

- e는 call by name 파라미터
- t는 e의 연산을 수행하는 task
- e의 결과를 얻기 위해 t.join을 수행한다.
- t.join은 결과가 계산될 때까지 멈춰진다.

=== Task interface

task의 간단한 인터페이스는 아래와 같다.

[source,scala]
----
def task(c: => A): Task[A]

trait Task[A] {
  def join: A
}
----

task와 join은 연산과 작업사이에 연결을 만든다.
그래서 'task(e).join == e' 가 된다.

implicit conversion을 통해 .join을 생략할 수도 있다.

[source,scala]
----
implicit def getJoin[T](x: Task[T]): T = x.join
----

=== Example: Starting Four Tasks

[source,scala]
----
val ((part1, part2), (part3, part4)) = parallel(parallel(sumSegment(a, p, 0, mid1),
                                                        sumSegment(a, p, mid1, mid2)),
                                                parallel(sumSegment(a, p, mid2, mid3),
                                                        sumSegment(a, p, mid3, a.length)))
power(part1 + part2 + part3 + part4, 1/p)
----

우리가 이미 봤었던 위의 예제를 근복적으로 동일하게 task를 이용하여 아래와 같이 할 수 있다.

[source,scala]
----
val t1 = task{sumSegment(a, p , 0, mid1)}
val t2 = task{sumSegment(a, p , mid1, mid2)}
val t3 = task{sumSegment(a, p , mid2, mid3)}
val t4 = task{sumSegment(a, p , mid3, a.length)}

power( t1 + t2 + t3 + t4, 1/p) // join 을 해주긴 해야 한다.
----

=== Can we define parallel using task?

[source,scala]
----
def parallel[A, B](cA: => A, cB: => B): (A, B) = {
  val tB: Task[B] = task{ cB }
  val tA: A = cA
  (tA, tB.join)
}
----

image::../static/img/week1/first-2.png[]

=== What is wrong with parallelWrong definition?

[source,scala]
----
// CORRECT
def parallel[A, B](cA: => A, cB: => B): (A, B) = {
  val tB: Task[B] = task{ cB }
  val tA: A = cA
  (tA, tB.join)
}

// WRONG
def parallelWrong[A, B](cA: => A, cB => B): (A, B) = {
  val tB: B = (task { cB }).join  // <1>
  val tA: A = cA
  (tA, tB)
}
----
<1> : cB.join을 수행하면 B task가 끝날때 까지 기다리게 된다. 이렇게 하면 tB가 수행된 다음에 tA가 실행되는 sequential한 프로그램이 된다.
