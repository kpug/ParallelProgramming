= Introduction to Parallele Computing

===  What is Parallel Computing(컴퓨터 작업)?

* 병렬 컴퓨팅이란 동일한 시간에 많은 컴퓨터 작업이 수행되는 것의 한 종류
* 기본 개념 : 컴퓨터 작업이 더 작은 문제로 나눠져서 일제히 해결될 수 있는 것.
* 가정 : 우리가 병렬 하드웨어를 가지고 있고, 컴퓨터 작업을 병렬로 처리 할 수 있다.

=== History

* 병렬 컴퓨팅은 최근에 유명해지긴 했지만 컴퓨터가 기계적 장치일 때부터 있어왔다.
* 19세기  https://ko.wikipedia.org/wiki/%EC%B0%B0%EC%8A%A4_%EB%B0%B0%EB%B9%84%EC%A7%80[Charles Babbage]가 프로그래밍가능한 컴퓨터의 개념을 창안했고 analytical engine라고 이름 붙였다.
*  Babbage가 analytical engine에 대한 그의 아이디어를 소개한 이후 이탈리아인 장군이자 수학자인 https://en.wikipedia.org/wiki/Luigi_Federico_Menabrea[Luigi Menabrea]는 Babbage의 컴퓨터의 기술을 호평했다.(wrote down)
* Menabrea는 비종속적인 컴퓨터 작업이 동일한 시간에 동시에 일어나는 것을 상상했고, 그의 아이디어는 Babbage의 analytical engine에 속도를 높였다.
* 20세기의 컴퓨터는 트렌지스터 기술에 기반하고 IBM연구원이었던 암달이 암달의 법칙이 이 즈음 만들어졌으며, ""단일 컴퓨터 구조는 한계에 도달할 것이며, 실제로 중요한 진전은 오직 다수의 컴퓨터의 상호연결에 의해서 만들어질 수 있다"고 주장했다.
* 암달에 이런 관점에도 불구하고 병렬 프로그래밍은 메인스트림이 되지 못했지만 고성능 컴퓨터 커뮤니티에 호응을 얻었다. 고성능 컴퓨팅에서 조점의 주 영역은 과학과 생물학 시뮬레이션, 날씨 예측, 암호학과 많은 처리를 요구하는 애플리케이션의 병렬 알고리즘이었다. 일반 사용자의 요구사항은 CPU이 클럭의 빈도가 증가함에 따라 만족되어졌다.
* 21세기가 되어 프로세서의 클럭 빈도의 증가가 불가능하게 되었고, 이유는 프로세서를 위해 요구되는 전원이 비선형 곡선을 이루기 시작했다. 그래서 프로세서 벤더들을 CPU의 클럭을 높이지 않고 동일한 프로세서 칩에 여러개의 CPU를 제공했다. 이게 멀티 코어 프로세서이다.

=== Why Parallel Computing?

* parallel programming은 sequential programming보다 더 어렵다
** sequential 연산을 병렬의 서브연산으로 하는 것은 도전적이며 심지어는 불가능하다.
** 프로그램의 정확성을 보장하는 것은 오류의 새로운 type때문에 더 어렵다.
* "속도 향상"이 오직 우리가 이 복잡성에 대해 댓가를 지불해야 하는 이유이다.

=== Parallel Programming vs Concurrent Programming

* 둘은 아주 연관이 있는 개념이다.
* Parallel program : 더 빠른 연산을 수행하기 위해 병렬 하드웨어를 사용한다. Efficiency가 주요 관심사다.
** division into subproblems?
** optional use of parallel hardware?
* Concurrent program : 동시에 여러개가 실행되거나 되지 않는다. modularity, responsiveness, maintainability를 향상시킨다. (모듈성, 민감성, 유지보수성?)
** when can an execution start?
** how can information exchange occur?
** how to manage access to shared resources?


=== Parallelism Granularity

* bit-level parallelism : processing multiple bits of data in parallel
* instruction-level parallelism: executing different instructions from the same instruction stream in parallel
* task-level parallelism : executing separate instruction streams in parallel

이 코스는 task-level parallelism에 초점을 맞춘다.

=== Classes of Parallel Computers

* 병렬 하드웨어의 수 많은 형태
** 멀티-코어 프로세서
** https://ko.wikipedia.org/wiki/%EB%8C%80%EC%B9%AD%ED%98%95_%EB%8B%A4%EC%A4%91_%EC%B2%98%EB%A6%AC[대칭형 다중 프로세서(SMP)]
** GPU
** https://ko.wikipedia.org/wiki/FPGA[field-programmable gate arrays]
** 컴퓨터 클러스터

우리의 초점은 멀티코어와 SMP를 위한 프로그래밍이 될 것이다.

=== course structure

** week 1 : basic of parallel computing and parallel program analysis
** week 2 : task-parallelism, basic parallel algorithms
** week 3 : data-parallelism, Scala parallel collections
** week 4 : data structures for parallel computing
