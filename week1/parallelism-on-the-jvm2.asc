= Parallelism on the JVM II

=== Composition with the synchronized block

* Invocations of the synchronized block can nest.

[source,scala]
----
class Account(private var amount: Int = 0) {
  def transfer(target: Account, n : Int) = // <1>
    this.synchronized {
      target.synchronized {
        this.amount -= n
        target.amount += n
      }
    }
  }
}
----
<1> 이 메소드를 구현할 때 동기화 구문을 위한 단일 글로벌 객체를 사용하면, 병목이 될 수 있다.
<2>


=== Deadlocks

* Deadlock is a scenario in which two or more threads compete for resources (such as monitor ownership), and wait for each to finish without releasing the already acquired resources.

=== 데드락 해결하기

* 한가지 방법은 항상 동일한 순서로 자원을 획득하는 것이다.

[source,scala]
----
val uid = getUniqueUid()
private def lockAndTransfer(target:Account, n: Int) =
  this.synchronized {
    target.synchronized {
      this.amount -= n
      target.amount += n
    }
  } def transfer(target: Account, n: Int) =
  if (this.uid < target.uid) this.lockAndTransfer(target, n)
  else target.lockAndTransfer(this, -n)
----

=== 메모리 모델

* 메모리 모델은 공유 메모리에 접근할 때 어떻게 스레드가 상호작용하는지 설명하는 규칙의 집합이다.
* 구체적으로 자바 메모리 모델은 JVM 런타임을 위한 메모리 모델이다. 자바 메모리 모델은 다수의 명확한 규칙을 가지고 있다. 이 과정에서는 모든 규칙을 설명할 순 없고 우리의 예제에 관련된 것만 설명한다.
** 1. 2개의 스레드가 메모리에서 분리된 공간에 작업하면 동기화는 필요 없다.
** 2. X스레드가 다른 Y스레드에 대해 join을 호출하면 Y스레드가 모두 write하는 것을 보장한다.


== Summary

* The parallelism constructs in the remainder of the course are implemented in terms of
** 스레드
** synchronized같은 동기화의 기초요소
