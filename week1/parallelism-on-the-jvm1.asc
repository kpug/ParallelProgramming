= Parallelism on the JVM I

=== JVM and parallelism

* There are many forms of parallelism
** GPUs
** custom parallel hardware
** multiprocessors
** multicore system
** distributed computer cluster

=== Processes

* 우리의 병렬 프로그램은 멀티코어나 멀티 프로세서 시스템에서 구동되며 메모리는 프로세서들 사이에서 공유된다.
* 프로그램은 호스트 컴퓨터의 운영체제 최상단에 JVM run time에서 구동된다.
* What are the sources of parallelism in a operating system?
** 운영체제는 하드웨어와 소프트웨어 리소스를 관리하고 프로그램 실행을 스케쥴링한다.
*** Windows, Linux, OSX etc
* Process
** OS에서 실행되는 프로그램의 인스턴스
** 프로세스가 실행되면 운영체제는 CPU실행시간, 메모리 어드레스 스페이스, 파일 핸들러, 네트워크 포트등의 자원을 할당한다.
** 각 프로세스는 유니크한 프로세스 식별자를 할당한다. PID
** The operating system multiplexes many different processes and a limited number of CPUs, so that they get time slices of execution. This mechanism is called multitasking.
** 2개의 다른 프로세스는 각각 다른 프로세스의 메모리를 직접 참조할 수 없다. - They are isolated
*** 보안상 중요하다.
*** 하지만 둘 사이에 커뮤니케이션을 하기는 어려워진다.

=== Threads

* 각 프로세스는 다수의 비독립적인 동시성 유닛인 스레드를 가질 수 있다.
** 장점
*** 프로그램 내부에서 programmatically하게 시작할 수 있다.
*** 스레드는 동일한 메모리 어드레스 스페이스를 공유한다.
** 스레드는 프로그램 카운터와 프로그램 스택을 가짐
*** program stack : 현재 실행하고 있는 호출 메소드의 순서를 포함하는 메모리의 영역
*** program counter : 현재 메소드에 포지션을 나타냄
** 스레드는 커뮤니케이션을 위해 힙 메모리를 사용한다.

=== Creating and starting threads

* Each JVM process starts with a main thread
** 병렬 프로그램에서는 우리의 연산을 위해 추가적인 스레드를 시작한다. 그러면 운영체제는 가용한 CPU를 할당한다.
** 스레드 생성 순서
*** 1. Define a Thread subclass
*** 2. Instantiate a new Thread object
*** 3. Call start on the Thread object

[source,scala]
----
class HelloThread extends Thread {
  override def run() {
    println("Hello world")
  }
}

val t = new HelloThread

t.start()
t.join()
----


=== Atomicity

* The previous demo showed that separate statements in two threads can overlap.
* In some cases, we want to ensure that a sequence of statements in a specific thread executes at once.
* An operation is atomic if it appears as if it occurred instantaneously from the point of view of other threads.

[source,scala]
----
private var uidCount = 0L
def getUniqueId(): Long = {
  uidCount = uidCount + 1
  uidCount
}
----

=== The synchronized block

* The synchronized block is used to achieve atomicity. Code block after a synchronized call on an object(;monitor) x is never executed by two threads at the same time.

[source,scala]
----
private val x = new AnyRef {}
private var uidCount = 0L
def getUniqueId(): Long = x.synchronized {
  uidCount = uidCount + 1
  uidCount
}
----
