= Running Computations in Parallel

=== Basic parallel construct

=== Example: computing p-norm

* https://ko.wikipedia.org/wiki/%EB%85%B8%EB%A6%84[p-norm] is a generalization of the notion of length from geometry.


=== Main step: sum of powers of array segment

* First, solve sequentially the following sumSegment problem
** an integer array a, representing our vector
** a positive double floating point number p
** two valid indices s <= t into the array a

[source,scala]
----
def sumSegment(a: Array[Int], p: Double, s: Int, t: Int): Int = {
  var i = s; var sum: Int = 0
  while(i < t) {
    sum = sum + power(a(i), p)
    i = i + 1
  }
  sum
}

def power(x: Int, p: Double): Int = math.exp(p * math.log(abs(x))).toInt
----

=== Given sumSegment(a,p,s,t), how to compute p-norm?

[source,scala]
----
def pNorm(a: Array[Int], p: Double): Int =
  power(sumSegment(a, p, 0, a.length), 1/p)
----


= Running Computations in Parallel

=== Basic parallel construct

=== Example: computing p-norm

* https://ko.wikipedia.org/wiki/%EB%85%B8%EB%A6%84[p-norm] is a generalization of the notion of length from geometry.


=== Main step: sum of powers of array segment

* First, solve sequentially the following sumSegment problem
** an integer array a, representing our vector
** a positive double floating point number p
** two valid indices s <= t into the array a

image::../static/img/week1/pnorm-1.png[]

[source,scala]
----
def sumSegment(a: Array[Int], p: Double, s: Int, t: Int): Int = {
  var i = s; var sum: Int = 0
  while(i < t) {
    sum = sum + power(a(i), p)
    i = i + 1
  }
  sum
}

def power(x: Int, p: Double): Int = math.exp(p * math.log(abs(x))).toInt
----

=== Given sumSegment(a,p,s,t), how to compute p-norm?

image::../static/img/week1/pnorm-2.png[]

===== 간단한 버전

[source,scala]
----
def pNorm(a: Array[Int], p: Double): Int =
  power(sumSegment(a, p, 0, a.length), 1/p)
----

===== 병렬 버전

image::../static/img/week1/pnorm-3.png[]


[source,scala]
----
def pNormTwoPart(a: Array[Int], p: Double): Int = {
  val m = a.length / 2
  val (sum1, sum2) = (sumSegment(a, p, 0, m),
                      sumSegment(a, p, m, a.length))
  power(sum1 + sum2, 1/p)
}
----

=== Using sumSegment twice

[source,scala]
----
def pNormTwoPart(a: Array[Int], p: Double): Int = {
  val m = a.length / 2
  val (sum1, sum2) = parallel(sumSegment(a, p, 0, m),  // <1>
                              sumSegment(a, p, m, a.length))
  power(sum1 + sum2, 1/p)
}
----
<1> parallel 함수 사용


=== How to process four array segments in parallel?


[source,scala]
----
val m1 = a.length/4;
val m2 = a.length/2;
val m3 = 3 * a.length/4;

val ((sum1, sum2),(sum3,sum4)) = parallel(parallel(sumSegment(a, p, 0, m1),
                          sumSegment(a, p, m1, m2)),
                          parallel(sumSegment(a, p, m2, m3),
                                                    sumSegment(a, p, m3, a.length)))
----

Which programming pattern or control structure in Scala would you use to construct a parallel program making use of any number of threads?

[ ] monad
[x] recursion
[ ] model-view-controller pattern
[ ] while loop

Recursion and the parallel construct are a powerful combination. Let us see how this works in our example.

=== Is there a recursive algorithm for an unbounded number of threads?

[source,scala]
----
def pNormRec(a: Array[Int], p: Double): Int =
  power(segmentRec(a, p, 0, a.length, 1/p))

// like sumSegment but parallel
def segmentRec(a: Array[Int], p: Double, s:Int, t:Int) = {
  if(t - s < threshold)
    sumSegment(a, p, s, t)
  else {
    val m = s + (t - s)/2
    val (sum1, sum2) = parallel(segmentRec(a, p, s, m),
                                segmentRec(a, p, m, t))
    sum1 + sum2
  }
}
----


=== Signature of parallel

[source,scala]
----
def parallel[A, B](taskA: => A, taskB => B): (A, B) = { ... }
----

* returns the same value as given
* benefit: parallel(a,b) can be faster than (a,b)
* it takes its arguments as by name, indicated with => A and => B


=== parallel is a control structure

[source,scala]
----
def parallel [A, B](taskA: => A, taskB => B): (A, B) = { ... }
def parallel1[A, B](taskA:    A, taskB    B): (A, B) = { ... }

val (va, vb) = parallel(a, b)
val (va, vb) = parallel1(a, b)
----

The second computation evaluates sequentially, as in val (va, vb) = (a, b)
For parallelism, need to pass unevaluated computations( call by name ).


=== What happens inside a system when we use parallel?

* Efficient parallelism requires support from
** language and libraries
** virtual machine
** operating system
** hardware
* One implementation of parallel uses Java Virtual Machine threads
** those typically map to operating system threads
** operating system can schedule different threads on multiple cores

**Give sufficient resources, a parallel program can run faster**

=== Underlying Hardware Architecture Affects Performance

[source,scala]
----
def sum1(a: Array[Int], p: Double, s: Int, t: Int): Int = {
    var i = s
    var sum: Int = 0
    while(i < t) {
      sum = sum + a(i) // no exponentiation!
      i = i + 1
    }
    sum
  }
}
val ((sum1,sum2),(sum3,sum4)) = parallel (
    parallel(sum(a, p, 0, m1), sum1(a, p, m1, m2)),
    parallel(sum(p, p, m2, m3), sum1(a, p, m3, a.length)0
  )
----

** Memory is a bottleneck! **


=== Combining computations of different length with parallel
