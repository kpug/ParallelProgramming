= Benchmarking Parallel Programs

=== Testing and Benchmarking

테스트와 벤치마킹은 다르다.

* 테스트 - 프로그램의 일부가 의도한 동작대로 행동하는지 확인하는 것
** ex) reverse method is what we expect

* 벤치마킹 - 프로그램의 일부분에 대해 성능 메트릭을 산정하는 것
** ex) running time, memory footprint, metric traffic, disk usage, latency

실제로 테스트는 바이너리 아웃풋을 낸다 - 프로그램이 적절한지 아닌지에 대해서

벤치마킹은 보통 프로그램이 적절한지에 대한 양을 표시하는 연속적인 값을 낸다.

=== Benchmarking Parallel Programs

왜 우리는 병렬 프로그램을 벤치마킹해 보아야 하는가?

주된 이유는 성능 이점이 실제로 수행시간에 향상되었는지를 알아봐야 하기 때문이다.

만약 성능상에 이점이 없다면 순차 프로그램으로 계속 작성할 수 있다. 이게 더 쉽게 만들수 있고 이해하기도 쉽다. 이런 이유에서 병렬 프로그램을 벤치마킹해보는 것은 순차 프로그램을 벤치마킹하는 것보다 더 중요하다.

=== Performance Factors

- 프로세서 속도 processor speed
- 프로세서의 갯수 number of processors
- 메모리 접근 대기 시간과 처리량 memory access latency and throughput (affects contention)
- 캐시 행동 cache behavior(e.g. false sharing, associativity effects)
- 실시간 행동 runtime behavior (e.g. garbage collection, JIT compilation, thread scheduling)

더 자세하게 알고 싶으면 이 문서를 함께 읽어보세요.
link:../static/docs/cpumemory.pdf[What Every Programmer Should Know About Momory, by Ulrich Drepper]

=== Measurement Methodologies

성능을 측정하는 것은 어렵다. 보통 성능 메트릭은 랜덤 값이다.

- multiple repetitions
- statistical treatment - computing mean and variance
- eliminating outliers
- ensuring steady state(warm-up)
- preventing anomalies(GC, JIT compilation, aggressive optimizations)

더 자세하게 공부하고 싶으시면 이 문서를 함께 읽어보세요.
link:../static/docs/oopsla07-georges.pdf[Statistically Rigorous Java Performance Evaluation, by Georges, Buytaert, and Eechhout]

== ScalaMeter

ScalaMeter는 JVM의 벤치마킹과 성능 리그레이션 테스팅 프레임워크 이다.

- performance regression testing - 현재 프로그램의 실행과 알고 있는 이전 실행의 성능을 비교한다.
- benchmarking - 현재 프로그램(혹은 일부)의 성능을 측정한다.

[source,scala]
----
libraryDependencies += "com.storm-enroute" %% "scalameter-core" % 0.6

import org.scalameter._

val time = measure {
  (0 until 10000).toArray
}

println(s"Array initialization time $time ms")
----

수행해보면 가끔 시간이 튀는 경우가 있는데 GC가 수행되면서 발생한다.

=== JVM Warmup

데모를 수행하면 연속되는 프로그램의 실행에서 매우 다른 실행 시간을 보인다.

JVM 프로그램이 실행되면, warmup의 기간을 경험하게 되는데 이 이후에 최대 성능을 얻을 수 있다.

- 우선 프로그램은 인터프린트된다.
- 그 다음, 프로그램의 일부는 머신 코드로 컴파일 된다.
- 이 후에, JVM은 추가적인 동적 최적화를 선택할 것이다.
- 마지막으로 프로그램은 안정적인 상태가 된다.

=== ScalaMeter Warmers

보통은, 안정적인 상태의 프로그램 성능을 측정하고 싶을 것이다.

ScalaMeter Warmer 객체는 안정적인 상태를 발견할 때 까지 벤치마킹된 코드를 실행한다.

[source,scala]
----
import org.scalameter._

val time = withWarmer(new Warmer.Default) measure {
  (0 until 1000000).toArray
}
----

=== ScalaMeter Configuration

ScalaMeter 환경설정 절은 최소, 최대 준비운동 실행 횟수처럼 구체적으로 다양한 파라미터를 사용할 수 있다.


[source,scala]
----
val time = config(
  Key.exec.minWarmupRuns -> 20,
  Key.exec.masWarmupRuns -> 60,
  Key.verbose -> true
) withWarmer(new Warmer.Default) measure {
  (0 until 1000000).toArray
}
----

=== ScalaMeter Measurers

- Measurer.Default - plain running time
- IgnoringGC - running time without GC pauses
- OutlierEliminations - removes statistical outliers
- MemoryFootprint - memory footpring of an object
- GarbageCollectionsCycles - total number of GC pauses
- newer ScalaMeter version can also measure method invocation counts and boxing counts

[source,scala]
----
withMeasurer(new Measurer.MemoryFootprint) measure{ (0 until 1000000).toArray }
----
