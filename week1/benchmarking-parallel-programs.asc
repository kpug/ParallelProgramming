= Benchmarking Parallel Programs

=== Testing and Benchmarking

테스트와 벤치마킹은 다르다.

* testing - ensures that parts of the program are behaving according to the intended behavior
** ex) reverse method is what we expect

* benchmarking - computes performance metrics for parts of the program
** ex) running time, memory footprint, metric traffic, disk usage, latency

Typically testing yields a binary output - a program or its part is either correct or it is not

Benchmarking usually yields a continuous value, which denotes the extent to which the program is correct


=== Benchmarking Parallel Programs

왜 우리는 병렬 프로그램을 벤치마킹해 보아야 하는가?

주된 이유는 성능 이점이 실제로 수행시간에 향상되었는지를 알아봐야 하기 때문이다.

Benchmarking parallel programs is even more important than benchmarking sequential programs

만약 성능상에 이점이 없다면 순차 프로그램으로 계속 작성할 수 있다. 이게 더 쉽게 만들수 있고 이해하기도 쉽다. 이런 이유에서 병렬 프로그램을 벤치마킹해보는 것은 순차 프로그램을 벤치마킹하는 것보다 더 중요하다.

=== Performance Factors

- processor speed
- number of processors
- memory access latency and throughput (affects contention)
- cache behavior(e.g. false sharing, associativity effects)
- runtime behavior (e.g. garbage collection, JIT compilation, thread scheduling)

To learn more, see link:../static/docs/cpumemory.pdf[What Every Programmer Should Know About Momory, by Ulrich Drepper]
